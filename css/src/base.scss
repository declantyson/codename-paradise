/* 
*
*	Paradise
*	Declan Tyson
*	v0.0.37
*	12/02/2018
*
*/

/* Defaults */

@import url('https://fonts.googleapis.com/css?family=Roboto|Roboto+Condensed|Permanent+Marker');

html, body {
	font-family: 'Roboto',  sans-serif;
	margin: 0;
	overflow: hidden;
}

.clear, .clearfix {
	clear: both;
	&.padout {
		padding: 20px 0;
	}
}

.col {
	float: left;
	margin-right: 1%;
	width: 99%;
	&.col-66 {
		width: 65%;
	}
	&.col-50 {
		width: 49%;
	}
	&.col-33 {
		width: 32%;
	}
}

$tileSize: 45;
canvas {
	width: calc(#{$tileSize} * 16);
	height: calc(#{$tileSize} * 9);
	background-color: black;
}

button {
	margin: 20px 0 20px 20px;
	font-family: 'Roboto',  sans-serif;
	font-size: 14px;
	-webkit-border-radius: none;
	-moz-border-radius: none;
	border-radius: none;
}

#log {
	position: fixed;
	top: 0;
	left: 0;
	margin: 0;
	height: 250px;
	overflow: auto;
	width: 250px;
	padding: 20px;
	background-color: rgba(255,255,255,0.5);
	font-family: monospace;
	font-size: 12px;
	display: none;

	hr {
		border: none;
		border-bottom: solid 1px rgba(255,255,255,0.5);
	}
}


/* Mixins */

@mixin transform($val) {
	-webkit-transform: $val;
	-moz-transform: $val;
	-ms-transform: $val;
	transform: $val;
}

@mixin borderRadius($val) {
	-webkit-border-radius: $val;
	-moz-border-radius: $val;
	border-radius: $val;
}

@mixin transition($val) {
	-webkit-transition: $val;
	-moz-transition: $val;
	-o-transition: $val;
	transition: $val;
}

@mixin boxShadow($val) {
	-webkit-box-shadow: $val;
	box-shadow: $val;
}

@function opposite-direction($directions) {
	$opposite-directions: ();
	$direction-map: (
			'top':    'bottom',
			'right':  'left',
			'bottom': 'top',
			'left':   'right',
			'center': 'center',
			'ltr':    'rtl',
			'rtl':    'ltr'
	);

	@each $direction in $directions {
		$direction: to-lower-case($direction);

		@if map-has-key($direction-map, $direction) {
			$opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
		} @else {
			@warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
		}
	}

	@return $opposite-directions;
}

@mixin triangle($direction, $color, $size) {
	@if not index(top right bottom left, $direction) {
		@error "Direction must be either `top`, `right`, `bottom` or `left`.";
	}

	width: 0;
	height: 0;
	content: '';
	z-index: 2;
	border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;
	border-#{$direction}-width: 0px;

	$perpendicular-borders: $size solid transparent;

	@if $direction == top or $direction == bottom {
		border-left:   $perpendicular-borders;
		border-right:  $perpendicular-borders;
	} @else if $direction == right or $direction == left {
		border-bottom: $perpendicular-borders;
		border-top:    $perpendicular-borders;
	}
}
